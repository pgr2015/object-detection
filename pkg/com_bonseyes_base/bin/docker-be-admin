#!/bin/sh

# The command has the following meaning:
#
#  - `-ti`: connects to the container interactively
#  - `--rm`: remove the container when the execution is finished
#  - `--network host`: use the networking stack of the host inside the container (simplifies discovery of tools)
#  - `-u $(id -u) --group-add $(id -g)`: use the same user inside the container as outside (simplifies file permissions)
#  - `--group-add $(getent group docker | cut -d: -f 3)`: allows the user inside the container to talk to docker
#  - `-v /var/run/docker.sock:/var/run/docker.sock`: allow the container to access docker
#  - `-v $HOME/.bonseyes:/.bonseyes`: persist all execution and runtime metadata outside the container
#  - `-v $(pwd):/data`: allow the container to see the files in the local directory


exec docker run -ti --rm  --network host -v $(pwd):/data  \
           -u $(id -u)  --group-add $(id -g) --group-add $(getent group docker | cut -d: -f 3) \
           -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.bonseyes:/.bonseyes \
           be-admin $*